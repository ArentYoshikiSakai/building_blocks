import { useState } from 'react';
import styled from 'styled-components';
import { BlockType } from '../../types';
import styles from './BlockPalette.module.css';

interface BlockPaletteProps {
  onDragStart: (type: BlockType, color: string) => void;
}

// „Éñ„É≠„ÉÉ„ÇØ„ÅÆ„Ç´„ÉÜ„Ç¥„É™„Éº„Çø„Ç§„Éó
type BlockCategory = 'Âü∫Êú¨' | 'Ë£ÖÈ£æ' | 'ÁâπÊÆä';

// „Ç´„ÉÜ„Ç¥„É™„Éº„Ç´„É©„Éº„Éû„ÉÉ„Éó
const categoryColors = {
  'Âü∫Êú¨': {
    bg: '#e3fafc',
    border: '#15aabf',
    active: '#c5f6fa'
  },
  'Ë£ÖÈ£æ': {
    bg: '#fff3bf',
    border: '#fab005',
    active: '#ffec99'
  },
  'ÁâπÊÆä': {
    bg: '#f3f0ff',
    border: '#7950f2',
    active: '#e5dbff'
  }
};

// „Éñ„É≠„ÉÉ„ÇØÊÉÖÂ†±„ÅÆÂûãÂÆöÁæ©
interface BlockInfo {
  type: BlockType;
  label: string;
  category: BlockCategory;
  icon: string; // ÁµµÊñáÂ≠ó„Ç¢„Ç§„Ç≥„É≥
}

const PaletteContainer = styled.div`
  position: absolute;
  top: 20px;
  left: 20px;
  background-color: rgba(255, 255, 255, 0.95);
  border-radius: 16px;
  padding: 16px;
  box-shadow: 0 6px 16px rgba(0, 0, 0, 0.15);
  display: flex;
  flex-direction: column;
  z-index: 1000;
  max-height: 80vh;
  overflow-y: auto;
  border: 3px solid #e0e0e0;
`;

const PaletteHeader = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-bottom: 16px;
`;

const PaletteTitle = styled.h3`
  margin: 0;
  font-size: 20px;
  color: #333;
  font-weight: bold;
  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
`;

const ToggleButton = styled.button`
  background: none;
  border: none;
  font-size: 20px;
  cursor: pointer;
  padding: 8px;
  color: #555;
  transition: all 0.2s;
  border-radius: 50%;
  
  &:hover {
    color: #000;
    background-color: #f0f0f0;
    transform: scale(1.1);
  }
`;

const CategoryTabs = styled.div`
  display: flex;
  margin-bottom: 16px;
  gap: 8px;
  justify-content: center;
`;

interface TabProps {
  isActive: boolean;
  category: BlockCategory;
}

const CategoryTab = styled.button<TabProps>`
  padding: 10px 18px;
  background: ${props => props.isActive ? categoryColors[props.category].active : categoryColors[props.category].bg};
  border: 3px solid ${props => props.isActive ? categoryColors[props.category].border : 'transparent'};
  border-radius: 12px;
  color: #333;
  font-weight: ${props => props.isActive ? 'bold' : 'normal'};
  font-size: 16px;
  cursor: pointer;
  transition: all 0.3s;
  box-shadow: ${props => props.isActive ? '0 4px 8px rgba(0, 0, 0, 0.15)' : 'none'};
  transform: ${props => props.isActive ? 'translateY(-2px)' : 'none'};
  
  &:hover {
    background-color: ${props => categoryColors[props.category].active};
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);
  }
`;

const BlocksGrid = styled.div`
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: 12px;
  margin-bottom: 20px;
`;

const BlockItem = styled.div`
  min-width: 85px;
  height: 85px;
  border-radius: 12px;
  cursor: grab;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  user-select: none;
  transition: all 0.3s;
  border: 2px solid rgba(0, 0, 0, 0.1);
  background-color: white;
  box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1);

  &:hover {
    transform: translateY(-4px);
    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
    z-index: 1;
    border-color: rgba(0, 0, 0, 0.2);
  }

  &:active {
    cursor: grabbing;
    transform: scale(0.95);
  }
`;

const BlockIcon = styled.div`
  font-size: 32px;
  margin-bottom: 8px;
  filter: drop-shadow(0 1px 2px rgba(0, 0, 0, 0.2));
`;

const BlockLabel = styled.div`
  font-size: 14px;
  text-align: center;
  color: #333;
  font-weight: bold;
`;

const ColorPickerSection = styled.div`
  margin-top: 12px;
  background-color: #f8f9fa;
  padding: 12px;
  border-radius: 12px;
`;

const ColorPickerTitle = styled.h4`
  margin: 0 0 12px 0;
  font-size: 16px;
  color: #333;
  text-align: center;
  font-weight: bold;
`;

const ColorPicker = styled.div`
  display: flex;
  flex-wrap: wrap;
  gap: 8px;
  justify-content: center;
`;

const ColorDot = styled.div<{ bgColor: string; isSelected: boolean }>`
  width: 32px;
  height: 32px;
  border-radius: 50%;
  background-color: ${props => props.bgColor};
  border: 3px solid ${props => props.isSelected ? '#000' : 'transparent'};
  cursor: pointer;
  transition: all 0.3s;
  box-shadow: ${props => props.isSelected ? '0 2px 8px rgba(0, 0, 0, 0.3)' : '0 1px 3px rgba(0, 0, 0, 0.1)'};
  
  &:hover {
    transform: scale(1.2);
    box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);
  }
`;

// „Éó„É™„Çª„ÉÉ„Éà„Ç´„É©„Éº„Éë„É¨„ÉÉ„Éà
const presetColors = [
  '#f44336', // Ëµ§
  '#e91e63', // „Éî„É≥„ÇØ
  '#9c27b0', // Á¥´
  '#673ab7', // „Éá„Ç£„Éº„Éó„Éë„Éº„Éó„É´
  '#3f51b5', // „Ç§„É≥„Éá„Ç£„Ç¥
  '#2196f3', // „Éñ„É´„Éº
  '#03a9f4', // „É©„Ç§„Éà„Éñ„É´„Éº
  '#00bcd4', // „Ç∑„Ç¢„É≥
  '#009688', // „ÉÜ„Ç£„Éº„É´
  '#4caf50', // „Ç∞„É™„Éº„É≥
  '#8bc34a', // „É©„Ç§„Éà„Ç∞„É™„Éº„É≥
  '#cddc39', // „É©„Ç§„É†
  '#ffeb3b', // „Ç§„Ç®„É≠„Éº
  '#ffc107', // „Ç¢„É≥„Éê„Éº
  '#ff9800', // „Ç™„É¨„É≥„Ç∏
  '#ff5722', // „Éá„Ç£„Éº„Éó„Ç™„É¨„É≥„Ç∏
  '#795548', // „Éñ„É©„Ç¶„É≥
  '#9e9e9e', // „Ç∞„É¨„Éº
  '#607d8b', // „Éñ„É´„Éº„Ç∞„É¨„Éº
  '#ffffff', // „Éõ„ÉØ„Ç§„Éà
];

// Âà©Áî®ÂèØËÉΩ„Å™„Éñ„É≠„ÉÉ„ÇØ„ÅÆÁ®ÆÈ°û„Å®„Åù„ÅÆ„Ç¢„Ç§„Ç≥„É≥/Ë°®Á§∫Âêç/„Ç´„ÉÜ„Ç¥„É™„Éº
const blockTypesInfo: BlockInfo[] = [
  { type: 'cube', label: 'Á´ãÊñπ‰Ωì', category: 'Âü∫Êú¨', icon: 'üì¶' },
  { type: 'rectangle', label: 'Áõ¥Êñπ‰Ωì', category: 'Âü∫Êú¨', icon: 'üß±' },
  { type: 'cylinder', label: 'ÂÜÜÊü±', category: 'Âü∫Êú¨', icon: 'üß™' },
  { type: 'triangle', label: '‰∏âËßíÂΩ¢', category: 'Âü∫Êú¨', icon: 'üî∫' },
  { type: 'arch', label: '„Ç¢„Éº„ÉÅ', category: 'Ë£ÖÈ£æ', icon: 'üåâ' },
  { type: 'wheel', label: 'ËªäËº™', category: 'ÁâπÊÆä', icon: 'üõû' },
  { type: 'window', label: 'Á™ì', category: 'Ë£ÖÈ£æ', icon: 'ü™ü' },
  { type: 'door', label: '„Éâ„Ç¢', category: 'Ë£ÖÈ£æ', icon: 'üö™' },
];

export const BlockPalette = ({ onDragStart }: BlockPaletteProps) => {
  const [selectedColor, setSelectedColor] = useState(presetColors[0]);
  const [activeCategory, setActiveCategory] = useState<BlockCategory>('Âü∫Êú¨');
  const [isPaletteCollapsed, setIsPaletteCollapsed] = useState(false);
  const [showColorPicker, setShowColorPicker] = useState(false);

  // ÈÅ∏Êäû„Åï„Çå„Åü„Ç´„ÉÜ„Ç¥„É™„Éº„ÅÆ„Éñ„É≠„ÉÉ„ÇØ„Çí„Éï„Ç£„É´„Çø„É™„É≥„Ç∞
  const filteredBlocks = blockTypesInfo.filter(block => block.category === activeCategory);

  const handleDragStart = (e: React.DragEvent<HTMLDivElement>, type: BlockType) => {
    e.dataTransfer.setData('blockType', type);
    e.dataTransfer.setData('blockColor', selectedColor);
    e.dataTransfer.effectAllowed = 'copy';
    
    // „Ç´„Çπ„Çø„É†„Éá„Éº„ÇøËª¢ÈÄÅ„ÅÆ„Åü„ÇÅ„ÅÆ„Ç¥„Éº„Çπ„ÉàÁîªÂÉè
    const ghostElement = document.createElement('div');
    ghostElement.style.width = '70px';
    ghostElement.style.height = '70px';
    ghostElement.style.backgroundColor = selectedColor;
    ghostElement.style.borderRadius = '8px';
    ghostElement.style.opacity = '0.8';
    ghostElement.style.boxShadow = '0 4px 8px rgba(0, 0, 0, 0.2)';
    document.body.appendChild(ghostElement);
    
    e.dataTransfer.setDragImage(ghostElement, 35, 35);
    
    // „Ç≥„Éº„É´„Éê„ÉÉ„ÇØ„ÇíÂÆüË°å
    onDragStart(type, selectedColor);
    
    // „ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„ÉóÈñ¢Êï∞Ôºà„Éâ„É©„ÉÉ„Ç∞ÁµÇ‰∫ÜÂæå„Å´„Ç¥„Éº„Çπ„ÉàË¶ÅÁ¥†„ÇíÂâäÈô§Ôºâ
    setTimeout(() => {
      document.body.removeChild(ghostElement);
    }, 0);
  };

  // „Éë„É¨„ÉÉ„Éà„ÇíÊäò„Çä„Åü„Åü„ÇÄ„Éà„Ç∞„É´
  const togglePalette = () => {
    setIsPaletteCollapsed(!isPaletteCollapsed);
  };

  // Âà©Áî®ÂèØËÉΩ„Å™„Ç´„ÉÜ„Ç¥„É™„Éº„ÅÆÈÖçÂàóÔºàÈáçË§á„ÇíÊéíÈô§Ôºâ
  const availableCategories = Array.from(new Set(blockTypesInfo.map(block => block.category)));

  // „Ç´„É©„Éº„Éî„ÉÉ„Ç´„Éº„ÅÆË°®Á§∫/ÈùûË°®Á§∫„ÇíÂàá„ÇäÊõø„Åà
  const toggleColorPicker = () => {
    setShowColorPicker(!showColorPicker);
  };
  
  // Ëâ≤„ÅÆÈÅ∏Êäû
  const handleColorSelect = (color: string) => {
    setSelectedColor(color);
    setShowColorPicker(false);
  };

  if (isPaletteCollapsed) {
    return (
      <PaletteContainer style={{ width: 'auto', padding: '12px' }}>
        <ToggleButton onClick={togglePalette} title="„Éë„É¨„ÉÉ„Éà„ÇíÂ±ïÈñã">
          <span style={{ fontSize: '24px' }}>üß©</span>
        </ToggleButton>
      </PaletteContainer>
    );
  }

  return (
    <PaletteContainer>
      <PaletteHeader>
        <PaletteTitle>„Éñ„É≠„ÉÉ„ÇØ„Éë„É¨„ÉÉ„Éà</PaletteTitle>
        <ToggleButton onClick={togglePalette} title="„Éë„É¨„ÉÉ„Éà„ÇíÊäò„Çä„Åü„Åü„ÇÄ">
          ‚¨ÖÔ∏è
        </ToggleButton>
      </PaletteHeader>
      
      <CategoryTabs>
        {availableCategories.map(category => (
          <CategoryTab 
            key={category}
            isActive={activeCategory === category}
            category={category}
            onClick={() => setActiveCategory(category)}
          >
            {category}
          </CategoryTab>
        ))}
      </CategoryTabs>
      
      <BlocksGrid>
        {filteredBlocks.map(block => (
          <BlockItem 
            key={block.type}
            draggable
            onDragStart={(e) => handleDragStart(e, block.type)}
            style={{ backgroundColor: selectedColor + '20' }} // ËñÑ„ÅÑËÉåÊôØËâ≤
          >
            <BlockIcon>{block.icon}</BlockIcon>
            <BlockLabel>{block.label}</BlockLabel>
          </BlockItem>
        ))}
      </BlocksGrid>
      
      <ColorPickerSection>
        <ColorPickerTitle>„Éñ„É≠„ÉÉ„ÇØ„ÅÆËâ≤</ColorPickerTitle>
        <div className={styles.colorPickerSection}>
          <div 
            className={styles.selectedColor} 
            style={{ backgroundColor: selectedColor }}
            onClick={toggleColorPicker}
          />
          <button 
            className={styles.colorPickerButton}
            onClick={toggleColorPicker}
          >
            Ëâ≤„ÇíÈÅ∏Êäû
          </button>
          
          {showColorPicker && (
            <div className={styles.colorPickerPopup}>
              <div className={styles.colorGrid}>
                {presetColors.map((color) => (
                  <div
                    key={color}
                    className={styles.colorOption}
                    style={{ backgroundColor: color }}
                    onClick={() => handleColorSelect(color)}
                  />
                ))}
              </div>
            </div>
          )}
        </div>
      </ColorPickerSection>
    </PaletteContainer>
  );
}; 